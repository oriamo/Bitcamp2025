{"version":3,"names":["_index","require","_reactNative","_EventEmitter","_Logger","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","WebRTCModule","NativeModules","log","Logger","RTCFrameCryptorStateEvent","Event","constructor","type","eventInitDict","frameCryptor","state","exports","RTCFrameCryptorState","RTCFrameCryptor","EventTarget","frameCryptorId","participantId","_frameCryptorId","_participantId","_registerEvents","id","_cryptorStateFromString","str","FrameCryptorStateNew","FrameCryptorStateOk","FrameCryptorStateDecryptionFailed","FrameCryptorStateEncryptionFailed","FrameCryptorStateInternalError","FrameCryptorStateKeyRatcheted","FrameCryptorStateMissingKey","setKeyIndex","keyIndex","params","frameCryptorSetKeyIndex","then","data","getKeyIndex","frameCryptorGetKeyIndex","setEnabled","enabled","frameCryptorSetEnabled","getEnabled","frameCryptorGetEnabled","dispose","frameCryptorDispose","removeListener","addListener","ev","debug","initDict","dispatchEvent","proto","prototype","defineEventAttribute"],"sources":["RTCFrameCryptor.ts"],"sourcesContent":["import { Event, EventTarget, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nconst { WebRTCModule } = NativeModules;\n\nconst log = new Logger('pc');\n\ntype FRAME_CRYPTOR_EVENTS =  'onframecryptorstatechanged';\n\ninterface IRTCDataChannelEventInitDict extends Event.EventInit {\n    frameCryptor: RTCFrameCryptor;\n    state: RTCFrameCryptorState;\n}\n\n/**\n * @eventClass\n * This event is fired whenever the RTCDataChannel has changed in any way.\n * @param {FRAME_CRYPTOR_EVENTS} type - The type of event.\n * @param {IRTCDataChannelEventInitDict} eventInitDict - The event init properties.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel#events MDN} for details.\n */\nexport class RTCFrameCryptorStateEvent<\nTEventType extends FRAME_CRYPTOR_EVENTS\n> extends Event<TEventType> {\n    /** @eventProperty */\n    frameCryptor: RTCFrameCryptor;\n    /** @eventProperty */\n    state: RTCFrameCryptorState;\n    constructor(type: TEventType, eventInitDict: IRTCDataChannelEventInitDict) {\n        super(type, eventInitDict);\n        this.frameCryptor = eventInitDict.frameCryptor;\n        this.state = eventInitDict.state;\n    }\n}\n\ntype RTCFrameCryptorEventMap = {\n    onframecryptorstatechanged: RTCFrameCryptorStateEvent<'onframecryptorstatechanged'>;\n}\n\nexport enum RTCFrameCryptorState {\n    FrameCryptorStateNew,\n    FrameCryptorStateOk,\n    FrameCryptorStateEncryptionFailed,\n    FrameCryptorStateDecryptionFailed,\n    FrameCryptorStateMissingKey,\n    FrameCryptorStateKeyRatcheted,\n    FrameCryptorStateInternalError,\n}\n\nexport default class RTCFrameCryptor extends EventTarget<RTCFrameCryptorEventMap> {\n    private _frameCryptorId: string;\n    private _participantId: string;\n\n    constructor(frameCryptorId: string, participantId: string) {\n        super();\n        this._frameCryptorId = frameCryptorId;\n        this._participantId = participantId;\n        this._registerEvents();\n    }\n\n    get id() {\n        return this._frameCryptorId;\n    }\n\n    get participantId() {\n        return this._participantId;\n    }\n\n    _cryptorStateFromString(str: string): RTCFrameCryptorState {\n        switch (str) {\n            case 'new':\n                return RTCFrameCryptorState.FrameCryptorStateNew;\n            case 'ok':\n                return RTCFrameCryptorState.FrameCryptorStateOk;\n            case 'decryptionFailed':\n                return RTCFrameCryptorState.FrameCryptorStateDecryptionFailed;\n            case 'encryptionFailed':\n                return RTCFrameCryptorState.FrameCryptorStateEncryptionFailed;\n            case 'internalError':\n                return RTCFrameCryptorState.FrameCryptorStateInternalError;\n            case 'keyRatcheted':\n                return RTCFrameCryptorState.FrameCryptorStateKeyRatcheted;\n            case 'missingKey':\n                return RTCFrameCryptorState.FrameCryptorStateMissingKey;\n            default:\n                throw 'Unknown FrameCryptorState: $str';\n        }\n    }\n\n    async setKeyIndex(keyIndex: number): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n            keyIndex,\n        };\n\n        return WebRTCModule.frameCryptorSetKeyIndex(params)\n            .then(data => data['result']);\n    }\n\n    async getKeyIndex(): Promise<number> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        return WebRTCModule.frameCryptorGetKeyIndex(params)\n            .then(data => data['keyIndex']);\n    }\n\n    async setEnabled(enabled: boolean): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n            enabled,\n        };\n\n        return WebRTCModule.frameCryptorSetEnabled(params)\n            .then(data => data['result']);\n    }\n\n    async getEnabled(): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        return WebRTCModule.frameCryptorGetEnabled(params)\n            .then(data => data['enabled']);\n    }\n\n    async dispose(): Promise<void> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        await WebRTCModule.frameCryptorDispose(params);\n        removeListener(this);\n    }\n\n\n    _registerEvents(): void {\n        addListener(this, 'frameCryptionStateChanged', (ev: any) => {\n            if (ev.participantId !== this._participantId || ev.frameCryptorId !== this._frameCryptorId) {\n                return;\n            }\n\n            log.debug(`${this.id} frameCryptionStateChanged ${ev.state}`);\n\n            const initDict = {\n                frameCryptor: this,\n                state: ev.state,\n            };\n\n            this.dispatchEvent(new RTCFrameCryptorStateEvent('onframecryptorstatechanged', initDict));\n        });\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = RTCFrameCryptor.prototype;\n\ndefineEventAttribute(proto, 'onframecryptorstatechanged');"],"mappings":"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"}