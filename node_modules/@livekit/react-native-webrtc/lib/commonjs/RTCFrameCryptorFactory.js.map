{"version":3,"names":["base64","_interopRequireWildcard","require","_reactNative","_RTCFrameCryptor","_interopRequireDefault","_RTCKeyProvider","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","WebRTCModule","NativeModules","RTCFrameCryptorAlgorithm","exports","RTCFrameCryptorFactory","createFrameCryptorForRtpSender","participantId","sender","algorithm","keyProvider","params","_peerConnectionId","_id","result","frameCryptorFactoryCreateFrameCryptor","Error","RTCFrameCryptor","createFrameCryptorForRtpReceiver","receiver","createDefaultKeyProvider","options","_options$failureToler","_options$keyRingSize","_options$discardFrame","sharedKey","ratchetWindowSize","failureTolerance","keyRingSize","discardFrameWhenCryptorNotReady","ratchetSalt","bytes","fromByteArray","uncryptedMagicBytes","frameCryptorFactoryCreateKeyProvider","RTCKeyProvider"],"sources":["RTCFrameCryptorFactory.ts"],"sourcesContent":["import * as base64 from 'base64-js';\nimport { NativeModules } from 'react-native';\n\nimport RTCFrameCryptor from './RTCFrameCryptor';\nimport RTCKeyProvider from './RTCKeyProvider';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\nconst { WebRTCModule } = NativeModules;\n\nexport enum RTCFrameCryptorAlgorithm {\n  kAesGcm = 0,\n  // kAesCbc = 1,\n}\n\nexport type RTCKeyProviderOptions = {\n  sharedKey: boolean,\n  ratchetSalt: string | Uint8Array,\n  ratchetWindowSize: number,\n  uncryptedMagicBytes?: Uint8Array,\n  failureTolerance?: number,\n  keyRingSize?: number,\n  discardFrameWhenCryptorNotReady?: boolean\n}\n\nexport default class RTCFrameCryptorFactory {\n    static createFrameCryptorForRtpSender(\n        participantId: string,\n        sender: RTCRtpSender,\n        algorithm: RTCFrameCryptorAlgorithm,\n        keyProvider: RTCKeyProvider\n    ): RTCFrameCryptor {\n        const params = {\n            'peerConnectionId': sender._peerConnectionId,\n            'rtpSenderId': sender._id,\n            participantId,\n            'keyProviderId': keyProvider._id,\n            'type': 'sender',\n            'algorithm': algorithm\n        };\n        const result = WebRTCModule.frameCryptorFactoryCreateFrameCryptor(params);\n\n        if (!result) {\n            throw new Error('Error when creating frame cryptor for sender');\n        }\n\n        return new RTCFrameCryptor(result, participantId);\n    }\n    static createFrameCryptorForRtpReceiver(\n        participantId: string,\n        receiver: RTCRtpReceiver,\n        algorithm: RTCFrameCryptorAlgorithm,\n        keyProvider: RTCKeyProvider\n    ): RTCFrameCryptor {\n        const params = {\n            'peerConnectionId': receiver._peerConnectionId,\n            'rtpReceiverId': receiver._id,\n            participantId,\n            'keyProviderId': keyProvider._id,\n            'type': 'receiver',\n            'algorithm': algorithm\n        };\n        const result = WebRTCModule.frameCryptorFactoryCreateFrameCryptor(params);\n\n        if (!result) {\n            throw new Error('Error when creating frame cryptor for receiver');\n        }\n\n        return new RTCFrameCryptor(result, participantId);\n    }\n\n    static createDefaultKeyProvider(options: RTCKeyProviderOptions): RTCKeyProvider {\n        const params = {\n            'sharedKey': options.sharedKey,\n            'ratchetWindowSize': options.ratchetWindowSize,\n            'failureTolerance': options.failureTolerance ?? -1,\n            'keyRingSize': options.keyRingSize ?? 16,\n            'discardFrameWhenCryptorNotReady': options.discardFrameWhenCryptorNotReady ?? false\n        };\n\n        if (typeof options.ratchetSalt === 'string') {\n            params['ratchetSalt'] = options.ratchetSalt;\n            params['ratchetSaltIsBase64'] = false;\n        } else {\n            const bytes = options.ratchetSalt as Uint8Array;\n\n            params['ratchetSalt'] = base64.fromByteArray(bytes);\n            params['ratchetSaltIsBase64'] = true;\n        }\n\n        if (options.uncryptedMagicBytes) {\n            params['uncryptedMagicBytes'] = base64.fromByteArray(options.uncryptedMagicBytes);\n        }\n\n        const result = WebRTCModule.frameCryptorFactoryCreateKeyProvider(params);\n\n        if (!result) {\n            throw new Error('Error when creating key provider!');\n        }\n\n        return new RTCKeyProvider(result);\n    }\n}"],"mappings":"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"}