{"version":3,"names":["base64","NativeModules","RTCFrameCryptor","RTCKeyProvider","WebRTCModule","RTCFrameCryptorAlgorithm","RTCFrameCryptorFactory","createFrameCryptorForRtpSender","participantId","sender","algorithm","keyProvider","params","_peerConnectionId","_id","result","frameCryptorFactoryCreateFrameCryptor","Error","createFrameCryptorForRtpReceiver","receiver","createDefaultKeyProvider","options","_options$failureToler","_options$keyRingSize","_options$discardFrame","sharedKey","ratchetWindowSize","failureTolerance","keyRingSize","discardFrameWhenCryptorNotReady","ratchetSalt","bytes","fromByteArray","uncryptedMagicBytes","frameCryptorFactoryCreateKeyProvider"],"sources":["RTCFrameCryptorFactory.ts"],"sourcesContent":["import * as base64 from 'base64-js';\nimport { NativeModules } from 'react-native';\n\nimport RTCFrameCryptor from './RTCFrameCryptor';\nimport RTCKeyProvider from './RTCKeyProvider';\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\nconst { WebRTCModule } = NativeModules;\n\nexport enum RTCFrameCryptorAlgorithm {\n  kAesGcm = 0,\n  // kAesCbc = 1,\n}\n\nexport type RTCKeyProviderOptions = {\n  sharedKey: boolean,\n  ratchetSalt: string | Uint8Array,\n  ratchetWindowSize: number,\n  uncryptedMagicBytes?: Uint8Array,\n  failureTolerance?: number,\n  keyRingSize?: number,\n  discardFrameWhenCryptorNotReady?: boolean\n}\n\nexport default class RTCFrameCryptorFactory {\n    static createFrameCryptorForRtpSender(\n        participantId: string,\n        sender: RTCRtpSender,\n        algorithm: RTCFrameCryptorAlgorithm,\n        keyProvider: RTCKeyProvider\n    ): RTCFrameCryptor {\n        const params = {\n            'peerConnectionId': sender._peerConnectionId,\n            'rtpSenderId': sender._id,\n            participantId,\n            'keyProviderId': keyProvider._id,\n            'type': 'sender',\n            'algorithm': algorithm\n        };\n        const result = WebRTCModule.frameCryptorFactoryCreateFrameCryptor(params);\n\n        if (!result) {\n            throw new Error('Error when creating frame cryptor for sender');\n        }\n\n        return new RTCFrameCryptor(result, participantId);\n    }\n    static createFrameCryptorForRtpReceiver(\n        participantId: string,\n        receiver: RTCRtpReceiver,\n        algorithm: RTCFrameCryptorAlgorithm,\n        keyProvider: RTCKeyProvider\n    ): RTCFrameCryptor {\n        const params = {\n            'peerConnectionId': receiver._peerConnectionId,\n            'rtpReceiverId': receiver._id,\n            participantId,\n            'keyProviderId': keyProvider._id,\n            'type': 'receiver',\n            'algorithm': algorithm\n        };\n        const result = WebRTCModule.frameCryptorFactoryCreateFrameCryptor(params);\n\n        if (!result) {\n            throw new Error('Error when creating frame cryptor for receiver');\n        }\n\n        return new RTCFrameCryptor(result, participantId);\n    }\n\n    static createDefaultKeyProvider(options: RTCKeyProviderOptions): RTCKeyProvider {\n        const params = {\n            'sharedKey': options.sharedKey,\n            'ratchetWindowSize': options.ratchetWindowSize,\n            'failureTolerance': options.failureTolerance ?? -1,\n            'keyRingSize': options.keyRingSize ?? 16,\n            'discardFrameWhenCryptorNotReady': options.discardFrameWhenCryptorNotReady ?? false\n        };\n\n        if (typeof options.ratchetSalt === 'string') {\n            params['ratchetSalt'] = options.ratchetSalt;\n            params['ratchetSaltIsBase64'] = false;\n        } else {\n            const bytes = options.ratchetSalt as Uint8Array;\n\n            params['ratchetSalt'] = base64.fromByteArray(bytes);\n            params['ratchetSaltIsBase64'] = true;\n        }\n\n        if (options.uncryptedMagicBytes) {\n            params['uncryptedMagicBytes'] = base64.fromByteArray(options.uncryptedMagicBytes);\n        }\n\n        const result = WebRTCModule.frameCryptorFactoryCreateKeyProvider(params);\n\n        if (!result) {\n            throw new Error('Error when creating key provider!');\n        }\n\n        return new RTCKeyProvider(result);\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,WAAW;AACnC,SAASC,aAAa,QAAQ,cAAc;AAE5C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,cAAc,MAAM,kBAAkB;AAG7C,MAAM;EAAEC;AAAa,CAAC,GAAGH,aAAa;AAEtC,WAAYI,wBAAwB,EAElC;AACD,WAHWA,wBAAwB;EAAxBA,wBAAwB,CAAxBA,wBAAwB;AAAA,GAAxBA,wBAAwB,KAAxBA,wBAAwB;AAepC,eAAe,MAAMC,sBAAsB,CAAC;EACxC,OAAOC,8BAA8BA,CACjCC,aAAqB,EACrBC,MAAoB,EACpBC,SAAmC,EACnCC,WAA2B,EACZ;IACf,MAAMC,MAAM,GAAG;MACX,kBAAkB,EAAEH,MAAM,CAACI,iBAAiB;MAC5C,aAAa,EAAEJ,MAAM,CAACK,GAAG;MACzBN,aAAa;MACb,eAAe,EAAEG,WAAW,CAACG,GAAG;MAChC,MAAM,EAAE,QAAQ;MAChB,WAAW,EAAEJ;IACjB,CAAC;IACD,MAAMK,MAAM,GAAGX,YAAY,CAACY,qCAAqC,CAACJ,MAAM,CAAC;IAEzE,IAAI,CAACG,MAAM,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;IACnE;IAEA,OAAO,IAAIf,eAAe,CAACa,MAAM,EAAEP,aAAa,CAAC;EACrD;EACA,OAAOU,gCAAgCA,CACnCV,aAAqB,EACrBW,QAAwB,EACxBT,SAAmC,EACnCC,WAA2B,EACZ;IACf,MAAMC,MAAM,GAAG;MACX,kBAAkB,EAAEO,QAAQ,CAACN,iBAAiB;MAC9C,eAAe,EAAEM,QAAQ,CAACL,GAAG;MAC7BN,aAAa;MACb,eAAe,EAAEG,WAAW,CAACG,GAAG;MAChC,MAAM,EAAE,UAAU;MAClB,WAAW,EAAEJ;IACjB,CAAC;IACD,MAAMK,MAAM,GAAGX,YAAY,CAACY,qCAAqC,CAACJ,MAAM,CAAC;IAEzE,IAAI,CAACG,MAAM,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;IACrE;IAEA,OAAO,IAAIf,eAAe,CAACa,MAAM,EAAEP,aAAa,CAAC;EACrD;EAEA,OAAOY,wBAAwBA,CAACC,OAA8B,EAAkB;IAAA,IAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA;IAC5E,MAAMZ,MAAM,GAAG;MACX,WAAW,EAAES,OAAO,CAACI,SAAS;MAC9B,mBAAmB,EAAEJ,OAAO,CAACK,iBAAiB;MAC9C,kBAAkB,GAAAJ,qBAAA,GAAED,OAAO,CAACM,gBAAgB,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;MAClD,aAAa,GAAAC,oBAAA,GAAEF,OAAO,CAACO,WAAW,cAAAL,oBAAA,cAAAA,oBAAA,GAAI,EAAE;MACxC,iCAAiC,GAAAC,qBAAA,GAAEH,OAAO,CAACQ,+BAA+B,cAAAL,qBAAA,cAAAA,qBAAA,GAAI;IAClF,CAAC;IAED,IAAI,OAAOH,OAAO,CAACS,WAAW,KAAK,QAAQ,EAAE;MACzClB,MAAM,CAAC,aAAa,CAAC,GAAGS,OAAO,CAACS,WAAW;MAC3ClB,MAAM,CAAC,qBAAqB,CAAC,GAAG,KAAK;IACzC,CAAC,MAAM;MACH,MAAMmB,KAAK,GAAGV,OAAO,CAACS,WAAyB;MAE/ClB,MAAM,CAAC,aAAa,CAAC,GAAGZ,MAAM,CAACgC,aAAa,CAACD,KAAK,CAAC;MACnDnB,MAAM,CAAC,qBAAqB,CAAC,GAAG,IAAI;IACxC;IAEA,IAAIS,OAAO,CAACY,mBAAmB,EAAE;MAC7BrB,MAAM,CAAC,qBAAqB,CAAC,GAAGZ,MAAM,CAACgC,aAAa,CAACX,OAAO,CAACY,mBAAmB,CAAC;IACrF;IAEA,MAAMlB,MAAM,GAAGX,YAAY,CAAC8B,oCAAoC,CAACtB,MAAM,CAAC;IAExE,IAAI,CAACG,MAAM,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;IACxD;IAEA,OAAO,IAAId,cAAc,CAACY,MAAM,CAAC;EACrC;AACJ"}