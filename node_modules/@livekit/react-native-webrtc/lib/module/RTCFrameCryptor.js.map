{"version":3,"names":["Event","EventTarget","defineEventAttribute","NativeModules","addListener","removeListener","Logger","WebRTCModule","log","RTCFrameCryptorStateEvent","constructor","type","eventInitDict","_defineProperty","frameCryptor","state","RTCFrameCryptorState","RTCFrameCryptor","frameCryptorId","participantId","_frameCryptorId","_participantId","_registerEvents","id","_cryptorStateFromString","str","FrameCryptorStateNew","FrameCryptorStateOk","FrameCryptorStateDecryptionFailed","FrameCryptorStateEncryptionFailed","FrameCryptorStateInternalError","FrameCryptorStateKeyRatcheted","FrameCryptorStateMissingKey","setKeyIndex","keyIndex","params","frameCryptorSetKeyIndex","then","data","getKeyIndex","frameCryptorGetKeyIndex","setEnabled","enabled","frameCryptorSetEnabled","getEnabled","frameCryptorGetEnabled","dispose","frameCryptorDispose","ev","debug","initDict","dispatchEvent","proto","prototype"],"sources":["RTCFrameCryptor.ts"],"sourcesContent":["import { Event, EventTarget, defineEventAttribute } from 'event-target-shim/index';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport Logger from './Logger';\nconst { WebRTCModule } = NativeModules;\n\nconst log = new Logger('pc');\n\ntype FRAME_CRYPTOR_EVENTS =  'onframecryptorstatechanged';\n\ninterface IRTCDataChannelEventInitDict extends Event.EventInit {\n    frameCryptor: RTCFrameCryptor;\n    state: RTCFrameCryptorState;\n}\n\n/**\n * @eventClass\n * This event is fired whenever the RTCDataChannel has changed in any way.\n * @param {FRAME_CRYPTOR_EVENTS} type - The type of event.\n * @param {IRTCDataChannelEventInitDict} eventInitDict - The event init properties.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel#events MDN} for details.\n */\nexport class RTCFrameCryptorStateEvent<\nTEventType extends FRAME_CRYPTOR_EVENTS\n> extends Event<TEventType> {\n    /** @eventProperty */\n    frameCryptor: RTCFrameCryptor;\n    /** @eventProperty */\n    state: RTCFrameCryptorState;\n    constructor(type: TEventType, eventInitDict: IRTCDataChannelEventInitDict) {\n        super(type, eventInitDict);\n        this.frameCryptor = eventInitDict.frameCryptor;\n        this.state = eventInitDict.state;\n    }\n}\n\ntype RTCFrameCryptorEventMap = {\n    onframecryptorstatechanged: RTCFrameCryptorStateEvent<'onframecryptorstatechanged'>;\n}\n\nexport enum RTCFrameCryptorState {\n    FrameCryptorStateNew,\n    FrameCryptorStateOk,\n    FrameCryptorStateEncryptionFailed,\n    FrameCryptorStateDecryptionFailed,\n    FrameCryptorStateMissingKey,\n    FrameCryptorStateKeyRatcheted,\n    FrameCryptorStateInternalError,\n}\n\nexport default class RTCFrameCryptor extends EventTarget<RTCFrameCryptorEventMap> {\n    private _frameCryptorId: string;\n    private _participantId: string;\n\n    constructor(frameCryptorId: string, participantId: string) {\n        super();\n        this._frameCryptorId = frameCryptorId;\n        this._participantId = participantId;\n        this._registerEvents();\n    }\n\n    get id() {\n        return this._frameCryptorId;\n    }\n\n    get participantId() {\n        return this._participantId;\n    }\n\n    _cryptorStateFromString(str: string): RTCFrameCryptorState {\n        switch (str) {\n            case 'new':\n                return RTCFrameCryptorState.FrameCryptorStateNew;\n            case 'ok':\n                return RTCFrameCryptorState.FrameCryptorStateOk;\n            case 'decryptionFailed':\n                return RTCFrameCryptorState.FrameCryptorStateDecryptionFailed;\n            case 'encryptionFailed':\n                return RTCFrameCryptorState.FrameCryptorStateEncryptionFailed;\n            case 'internalError':\n                return RTCFrameCryptorState.FrameCryptorStateInternalError;\n            case 'keyRatcheted':\n                return RTCFrameCryptorState.FrameCryptorStateKeyRatcheted;\n            case 'missingKey':\n                return RTCFrameCryptorState.FrameCryptorStateMissingKey;\n            default:\n                throw 'Unknown FrameCryptorState: $str';\n        }\n    }\n\n    async setKeyIndex(keyIndex: number): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n            keyIndex,\n        };\n\n        return WebRTCModule.frameCryptorSetKeyIndex(params)\n            .then(data => data['result']);\n    }\n\n    async getKeyIndex(): Promise<number> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        return WebRTCModule.frameCryptorGetKeyIndex(params)\n            .then(data => data['keyIndex']);\n    }\n\n    async setEnabled(enabled: boolean): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n            enabled,\n        };\n\n        return WebRTCModule.frameCryptorSetEnabled(params)\n            .then(data => data['result']);\n    }\n\n    async getEnabled(): Promise<boolean> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        return WebRTCModule.frameCryptorGetEnabled(params)\n            .then(data => data['enabled']);\n    }\n\n    async dispose(): Promise<void> {\n        const params = {\n            frameCryptorId: this._frameCryptorId,\n        };\n\n        await WebRTCModule.frameCryptorDispose(params);\n        removeListener(this);\n    }\n\n\n    _registerEvents(): void {\n        addListener(this, 'frameCryptionStateChanged', (ev: any) => {\n            if (ev.participantId !== this._participantId || ev.frameCryptorId !== this._frameCryptorId) {\n                return;\n            }\n\n            log.debug(`${this.id} frameCryptionStateChanged ${ev.state}`);\n\n            const initDict = {\n                frameCryptor: this,\n                state: ev.state,\n            };\n\n            this.dispatchEvent(new RTCFrameCryptorStateEvent('onframecryptorstatechanged', initDict));\n        });\n    }\n}\n\n/**\n * Define the `onxxx` event handlers.\n */\nconst proto = RTCFrameCryptor.prototype;\n\ndefineEventAttribute(proto, 'onframecryptorstatechanged');"],"mappings":"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"}