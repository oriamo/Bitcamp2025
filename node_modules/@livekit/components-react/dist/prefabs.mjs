import * as e from "react";
import { c as ie, w as oe, r as le, m as ue, a as K } from "./room-DI7DLgYS.mjs";
import { C as G, S as de, a as me, M as B, b as fe, T as R, c as he, d as pe, D as J, e as ge, f as H, L as Q, G as Ee, P as z, F as ve, g as Se, h as ke, R as be, i as Ce, j as we, k as ye, B as Ie } from "./components-DoUKwDyM.mjs";
import { w as Me, x, y as Ne, z as Pe, A as X, t as Y, B as Te, C as Le } from "./hooks-D-XcLLlf.mjs";
import { j as Z, an as Ae, ao as De, l as P, a as Re, ap as Ve, aq as Oe, a1 as q, ar as $e, as as Ue } from "./contexts-BIrOxv6y.mjs";
import { Track as y, facingModeFromLocalTrack as _e, Mutex as Fe, createLocalTracks as Be, createLocalVideoTrack as qe, VideoPresets as xe, createLocalAudioTrack as We, RoomEvent as je } from "livekit-client";
function ee({
  messageFormatter: o,
  messageDecoder: d,
  messageEncoder: l,
  channelTopic: a,
  ...E
}) {
  const p = e.useRef(null), m = e.useRef(null), u = e.useMemo(() => ({ messageDecoder: d, messageEncoder: l, channelTopic: a }), [d, l, a]), { chatMessages: n, send: I, isSending: t } = Me(u), f = Z(), r = e.useRef(0);
  async function v(c) {
    c.preventDefault(), m.current && m.current.value.trim() !== "" && (await I(m.current.value), m.current.value = "", m.current.focus());
  }
  return e.useEffect(() => {
    var c;
    p && ((c = p.current) == null || c.scrollTo({ top: p.current.scrollHeight }));
  }, [p, n]), e.useEffect(() => {
    var i, g, s, b, C;
    if (!f || n.length === 0)
      return;
    if ((i = f.widget.state) != null && i.showChat && n.length > 0 && r.current !== ((g = n[n.length - 1]) == null ? void 0 : g.timestamp)) {
      r.current = (s = n[n.length - 1]) == null ? void 0 : s.timestamp;
      return;
    }
    const c = n.filter(
      (A) => !r.current || A.timestamp > r.current
    ).length, { widget: h } = f;
    c > 0 && ((b = h.state) == null ? void 0 : b.unreadMessages) !== c && ((C = h.dispatch) == null || C.call(h, { msg: "unread_msg", count: c }));
  }, [n, f == null ? void 0 : f.widget]), /* @__PURE__ */ e.createElement("div", { ...E, className: "lk-chat" }, /* @__PURE__ */ e.createElement("div", { className: "lk-chat-header" }, "Messages", f && /* @__PURE__ */ e.createElement(G, { className: "lk-close-button" }, /* @__PURE__ */ e.createElement(de, null))), /* @__PURE__ */ e.createElement("ul", { className: "lk-list lk-chat-messages", ref: p }, E.children ? n.map(
    (c, h) => ie(E.children, {
      entry: c,
      key: c.id ?? h,
      messageFormatter: o
    })
  ) : n.map((c, h, i) => {
    const g = h >= 1 && i[h - 1].from === c.from, s = h >= 1 && c.timestamp - i[h - 1].timestamp < 6e4;
    return /* @__PURE__ */ e.createElement(
      me,
      {
        key: c.id ?? h,
        hideName: g,
        hideTimestamp: g === !1 ? !1 : s,
        entry: c,
        messageFormatter: o
      }
    );
  })), /* @__PURE__ */ e.createElement("form", { className: "lk-chat-form", onSubmit: v }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control lk-chat-form-input",
      disabled: t,
      ref: m,
      type: "text",
      placeholder: "Enter a message...",
      onInput: (c) => c.stopPropagation(),
      onKeyDown: (c) => c.stopPropagation(),
      onKeyUp: (c) => c.stopPropagation()
    }
  ), /* @__PURE__ */ e.createElement("button", { type: "submit", className: "lk-button lk-chat-form-button", disabled: t }, "Send")));
}
function O({
  kind: o,
  initialSelection: d,
  onActiveDeviceChange: l,
  tracks: a,
  requestPermissions: E = !1,
  ...p
}) {
  const [m, u] = e.useState(!1), [n, I] = e.useState([]), [t, f] = e.useState(!0), [r, v] = e.useState(E), c = (s, b) => {
    P.debug("handle device change"), u(!1), l == null || l(s, b);
  }, h = e.useRef(null), i = e.useRef(null);
  e.useLayoutEffect(() => {
    m && v(!0);
  }, [m]), e.useLayoutEffect(() => {
    h.current && i.current && (n || t) && Ae(h.current, i.current).then(({ x: s, y: b }) => {
      i.current && Object.assign(i.current.style, { left: `${s}px`, top: `${b}px` });
    }), f(!1);
  }, [h, i, n, t]);
  const g = e.useCallback(
    (s) => {
      i.current && s.target !== h.current && m && De(i.current, s) && u(!1);
    },
    [m, i, h]
  );
  return e.useEffect(() => (document.addEventListener("click", g), window.addEventListener("resize", () => f(!0)), () => {
    document.removeEventListener("click", g), window.removeEventListener("resize", () => f(!0));
  }), [g, f]), /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-button-menu",
      "aria-pressed": m,
      ...p,
      onClick: () => u(!m),
      ref: h
    },
    p.children
  ), !p.disabled && /* @__PURE__ */ e.createElement(
    "div",
    {
      className: "lk-device-menu",
      ref: i,
      style: { visibility: m ? "visible" : "hidden" }
    },
    o ? /* @__PURE__ */ e.createElement(
      B,
      {
        initialSelection: d,
        onActiveDeviceChange: (s) => c(o, s),
        onDeviceListChange: I,
        kind: o,
        track: a == null ? void 0 : a[o],
        requestPermissions: r
      }
    ) : /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Audio inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "audioinput",
        onActiveDeviceChange: (s) => c("audioinput", s),
        onDeviceListChange: I,
        track: a == null ? void 0 : a.audioinput,
        requestPermissions: r
      }
    ), /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Video inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "videoinput",
        onActiveDeviceChange: (s) => c("videoinput", s),
        onDeviceListChange: I,
        track: a == null ? void 0 : a.videoinput,
        requestPermissions: r
      }
    ))
  ));
}
function W() {
  e.useEffect(() => {
    oe();
  }, []);
}
function ze(o, d) {
  const [l, a] = e.useState(), E = e.useMemo(() => new Fe(), []);
  return e.useEffect(() => {
    let p = !1, m = [];
    return E.lock().then(async (u) => {
      try {
        (o.audio || o.video) && (m = await Be(o), p ? m.forEach((n) => n.stop()) : a(m));
      } catch (n) {
        d && n instanceof Error ? d(n) : P.error(n);
      } finally {
        u();
      }
    }), () => {
      p = !0, m.forEach((u) => {
        u.stop();
      });
    };
  }, [JSON.stringify(o, le), d, E]), l;
}
function Ze(o, d, l) {
  const [a, E] = e.useState(null), [p, m] = e.useState(!1), u = Ne({ kind: l }), [n, I] = e.useState(
    void 0
  ), [t, f] = e.useState(), [r, v] = e.useState(d);
  e.useEffect(() => {
    v(d);
  }, [d]);
  const c = async (g, s) => {
    try {
      const b = s === "videoinput" ? await qe({
        deviceId: g,
        resolution: xe.h720.resolution
      }) : await We({ deviceId: g }), C = await b.getDeviceId(!1);
      C && g !== C && (i.current = C, v(C)), f(b);
    } catch (b) {
      b instanceof Error && E(b);
    }
  }, h = async (g, s) => {
    await g.setDeviceId(s), i.current = s;
  }, i = e.useRef(r);
  return e.useEffect(() => {
    o && !t && !a && !p && (P.debug("creating track", l), m(!0), c(r, l).finally(() => {
      m(!1);
    }));
  }, [o, t, a, p]), e.useEffect(() => {
    t && (o ? n != null && n.deviceId && i.current !== (n == null ? void 0 : n.deviceId) ? (P.debug(`switching ${l} device from`, i.current, n.deviceId), h(t, n.deviceId)) : (P.debug(`unmuting local ${l} track`), t.unmute()) : (P.debug(`muting ${l} track`), t.mute().then(() => P.debug(t.mediaStreamTrack))));
  }, [t, n, o, l]), e.useEffect(() => () => {
    t && (P.debug(`stopping local ${l} track`), t.stop(), t.mute());
  }, []), e.useEffect(() => {
    I(u == null ? void 0 : u.find((g) => g.deviceId === r));
  }, [r, u]), {
    selectedDevice: n,
    localTrack: t,
    deviceError: a
  };
}
function et({
  defaults: o = {},
  onValidate: d,
  onSubmit: l,
  onError: a,
  debug: E,
  joinLabel: p = "Join Room",
  micLabel: m = "Microphone",
  camLabel: u = "Camera",
  userLabel: n = "Username",
  persistUserChoices: I = !0,
  videoProcessor: t,
  ...f
}) {
  const {
    userChoices: r,
    saveAudioInputDeviceId: v,
    saveAudioInputEnabled: c,
    saveVideoInputDeviceId: h,
    saveVideoInputEnabled: i,
    saveUsername: g
  } = x({
    defaults: o,
    preventSave: !I,
    preventLoad: !I
  }), [s, b] = e.useState(r), [C, A] = e.useState(s.audioEnabled), [w, L] = e.useState(s.videoEnabled), [T, $] = e.useState(s.audioDeviceId), [S, N] = e.useState(s.videoDeviceId), [V, ae] = e.useState(s.username);
  e.useEffect(() => {
    c(C);
  }, [C, c]), e.useEffect(() => {
    i(w);
  }, [w, i]), e.useEffect(() => {
    v(T);
  }, [T, v]), e.useEffect(() => {
    h(S);
  }, [S, h]), e.useEffect(() => {
    g(V);
  }, [V, g]);
  const D = ze(
    {
      audio: C ? { deviceId: r.audioDeviceId } : !1,
      video: w ? { deviceId: r.videoDeviceId, processor: t } : !1
    },
    a
  ), U = e.useRef(null), M = e.useMemo(
    () => D == null ? void 0 : D.filter((k) => k.kind === y.Kind.Video)[0],
    [D]
  ), ne = e.useMemo(() => {
    if (M) {
      const { facingMode: k } = _e(M);
      return k;
    } else
      return "undefined";
  }, [M]), j = e.useMemo(
    () => D == null ? void 0 : D.filter((k) => k.kind === y.Kind.Audio)[0],
    [D]
  );
  e.useEffect(() => (U.current && M && (M.unmute(), M.attach(U.current)), () => {
    M == null || M.detach();
  }), [M]);
  const [se, ce] = e.useState(), _ = e.useCallback(
    (k) => typeof d == "function" ? d(k) : k.username !== "",
    [d]
  );
  e.useEffect(() => {
    const k = {
      username: V,
      videoEnabled: w,
      videoDeviceId: S,
      audioEnabled: C,
      audioDeviceId: T
    };
    b(k), ce(_(k));
  }, [V, w, _, C, T, S]);
  function re(k) {
    k.preventDefault(), _(s) ? typeof l == "function" && l(s) : P.warn("Validation failed with: ", s);
  }
  return W(), /* @__PURE__ */ e.createElement("div", { className: "lk-prejoin", ...f }, /* @__PURE__ */ e.createElement("div", { className: "lk-video-container" }, M && /* @__PURE__ */ e.createElement("video", { ref: U, width: "1280", height: "720", "data-lk-facing-mode": ne }), (!M || !w) && /* @__PURE__ */ e.createElement("div", { className: "lk-camera-off-note" }, /* @__PURE__ */ e.createElement(fe, null))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-container" }, /* @__PURE__ */ e.createElement("div", { className: "lk-button-group audio" }, /* @__PURE__ */ e.createElement(
    R,
    {
      initialState: C,
      source: y.Source.Microphone,
      onChange: (k) => A(k)
    },
    m
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      initialSelection: T,
      kind: "audioinput",
      disabled: !j,
      tracks: { audioinput: j },
      onActiveDeviceChange: (k, F) => $(F)
    }
  ))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group video" }, /* @__PURE__ */ e.createElement(
    R,
    {
      initialState: w,
      source: y.Source.Camera,
      onChange: (k) => L(k)
    },
    u
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      initialSelection: S,
      kind: "videoinput",
      disabled: !M,
      tracks: { videoinput: M },
      onActiveDeviceChange: (k, F) => N(F)
    }
  )))), /* @__PURE__ */ e.createElement("form", { className: "lk-username-container" }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control",
      id: "username",
      name: "username",
      type: "text",
      defaultValue: V,
      placeholder: n,
      onChange: (k) => ae(k.target.value),
      autoComplete: "off"
    }
  ), /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-join-button",
      type: "submit",
      onClick: re,
      disabled: !se
    },
    p
  )), E && /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("strong", null, "User Choices:"), /* @__PURE__ */ e.createElement("ul", { className: "lk-list", style: { overflow: "hidden", maxWidth: "15rem" } }, /* @__PURE__ */ e.createElement("li", null, "Username: ", `${s.username}`), /* @__PURE__ */ e.createElement("li", null, "Video Enabled: ", `${s.videoEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Audio Enabled: ", `${s.audioEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Video Device: ", `${s.videoDeviceId}`), /* @__PURE__ */ e.createElement("li", null, "Audio Device: ", `${s.audioDeviceId}`))));
}
function Ke({ props: o }) {
  const { dispatch: d, state: l } = Re().widget, a = "lk-button lk-settings-toggle";
  return { mergedProps: e.useMemo(() => ue(o, {
    className: a,
    onClick: () => {
      d && d({ msg: "toggle_settings" });
    },
    "aria-pressed": l != null && l.showSettings ? "true" : "false"
  }), [o, a, d, l]) };
}
const Ge = /* @__PURE__ */ e.forwardRef(
  function(d, l) {
    const { mergedProps: a } = Ke({ props: d });
    return /* @__PURE__ */ e.createElement("button", { ref: l, ...a }, d.children);
  }
);
function te({
  variation: o,
  controls: d,
  saveUserChoices: l = !0,
  onDeviceError: a,
  ...E
}) {
  var $;
  const [p, m] = e.useState(!1), u = Z();
  e.useEffect(() => {
    var S, N;
    ((S = u == null ? void 0 : u.widget.state) == null ? void 0 : S.showChat) !== void 0 && m((N = u == null ? void 0 : u.widget.state) == null ? void 0 : N.showChat);
  }, [($ = u == null ? void 0 : u.widget.state) == null ? void 0 : $.showChat]);
  const I = Pe(`(max-width: ${p ? 1e3 : 760}px)`) ? "minimal" : "verbose";
  o ?? (o = I);
  const t = { leave: !0, ...d }, f = X();
  f ? (t.camera ?? (t.camera = f.canPublish), t.microphone ?? (t.microphone = f.canPublish), t.screenShare ?? (t.screenShare = f.canPublish), t.chat ?? (t.chat = f.canPublishData && (d == null ? void 0 : d.chat))) : (t.camera = !1, t.chat = !1, t.microphone = !1, t.screenShare = !1);
  const r = e.useMemo(
    () => o === "minimal" || o === "verbose",
    [o]
  ), v = e.useMemo(
    () => o === "textOnly" || o === "verbose",
    [o]
  ), c = Ve(), [h, i] = e.useState(!1), g = e.useCallback(
    (S) => {
      i(S);
    },
    [i]
  ), s = K({ className: "lk-control-bar" }, E), {
    saveAudioInputEnabled: b,
    saveVideoInputEnabled: C,
    saveAudioInputDeviceId: A,
    saveVideoInputDeviceId: w
  } = x({ preventSave: !l }), L = e.useCallback(
    (S, N) => N ? b(S) : null,
    [b]
  ), T = e.useCallback(
    (S, N) => N ? C(S) : null,
    [C]
  );
  return /* @__PURE__ */ e.createElement("div", { ...s }, t.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: y.Source.Microphone,
      showIcon: r,
      onChange: L,
      onDeviceError: (S) => a == null ? void 0 : a({ source: y.Source.Microphone, error: S })
    },
    v && "Microphone"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "audioinput",
      onActiveDeviceChange: (S, N) => A(N ?? "default")
    }
  ))), t.camera && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: y.Source.Camera,
      showIcon: r,
      onChange: T,
      onDeviceError: (S) => a == null ? void 0 : a({ source: y.Source.Camera, error: S })
    },
    v && "Camera"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "videoinput",
      onActiveDeviceChange: (S, N) => w(N ?? "default")
    }
  ))), t.screenShare && c && /* @__PURE__ */ e.createElement(
    R,
    {
      source: y.Source.ScreenShare,
      captureOptions: { audio: !0, selfBrowserSurface: "include" },
      showIcon: r,
      onChange: g,
      onDeviceError: (S) => a == null ? void 0 : a({ source: y.Source.ScreenShare, error: S })
    },
    v && (h ? "Stop screen share" : "Share screen")
  ), t.chat && /* @__PURE__ */ e.createElement(G, null, r && /* @__PURE__ */ e.createElement(he, null), v && "Chat"), t.settings && /* @__PURE__ */ e.createElement(Ge, null, r && /* @__PURE__ */ e.createElement(pe, null), v && "Settings"), t.leave && /* @__PURE__ */ e.createElement(J, null, r && /* @__PURE__ */ e.createElement(ge, null), v && "Leave"), /* @__PURE__ */ e.createElement(H, null));
}
function tt({
  chatMessageFormatter: o,
  chatMessageDecoder: d,
  chatMessageEncoder: l,
  SettingsComponent: a,
  ...E
}) {
  var c, h;
  const [p, m] = e.useState({
    showChat: !1,
    unreadMessages: 0,
    showSettings: !1
  }), u = e.useRef(null), n = Y(
    [
      { source: y.Source.Camera, withPlaceholder: !0 },
      { source: y.Source.ScreenShare, withPlaceholder: !1 }
    ],
    { updateOnlyOn: [je.ActiveSpeakersChanged], onlySubscribed: !1 }
  ), I = (i) => {
    P.debug("updating widget state", i), m(i);
  }, t = Oe(), f = n.filter(q).filter((i) => i.publication.source === y.Source.ScreenShare), r = (c = Te(t)) == null ? void 0 : c[0], v = n.filter((i) => !$e(i, r));
  return e.useEffect(() => {
    var i, g, s, b, C, A;
    if (f.some((w) => w.publication.isSubscribed) && u.current === null ? (P.debug("Auto set screen share focus:", { newScreenShareTrack: f[0] }), (g = (i = t.pin).dispatch) == null || g.call(i, { msg: "set_pin", trackReference: f[0] }), u.current = f[0]) : u.current && !f.some(
      (w) => {
        var L, T;
        return w.publication.trackSid === ((T = (L = u.current) == null ? void 0 : L.publication) == null ? void 0 : T.trackSid);
      }
    ) && (P.debug("Auto clearing screen share focus."), (b = (s = t.pin).dispatch) == null || b.call(s, { msg: "clear_pin" }), u.current = null), r && !q(r)) {
      const w = n.find(
        (L) => L.participant.identity === r.participant.identity && L.source === r.source
      );
      w !== r && q(w) && ((A = (C = t.pin).dispatch) == null || A.call(C, { msg: "set_pin", trackReference: w }));
    }
  }, [
    f.map((i) => `${i.publication.trackSid}_${i.publication.isSubscribed}`).join(),
    (h = r == null ? void 0 : r.publication) == null ? void 0 : h.trackSid,
    n
  ]), W(), /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference", ...E }, Ue() && /* @__PURE__ */ e.createElement(
    Q,
    {
      value: t,
      onWidgetChange: I
    },
    /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference-inner" }, r ? /* @__PURE__ */ e.createElement("div", { className: "lk-focus-layout-wrapper" }, /* @__PURE__ */ e.createElement(ve, null, /* @__PURE__ */ e.createElement(Se, { tracks: v }, /* @__PURE__ */ e.createElement(z, null)), r && /* @__PURE__ */ e.createElement(ke, { trackRef: r }))) : /* @__PURE__ */ e.createElement("div", { className: "lk-grid-layout-wrapper" }, /* @__PURE__ */ e.createElement(Ee, { tracks: n }, /* @__PURE__ */ e.createElement(z, null))), /* @__PURE__ */ e.createElement(te, { controls: { chat: !0, settings: !!a } })),
    /* @__PURE__ */ e.createElement(
      ee,
      {
        style: { display: p.showChat ? "grid" : "none" },
        messageFormatter: o,
        messageEncoder: l,
        messageDecoder: d
      }
    ),
    a && /* @__PURE__ */ e.createElement(
      "div",
      {
        className: "lk-settings-menu-modal",
        style: { display: p.showSettings ? "block" : "none" }
      },
      /* @__PURE__ */ e.createElement(a, null)
    )
  ), /* @__PURE__ */ e.createElement(be, null), /* @__PURE__ */ e.createElement(Ce, null));
}
function at({ ...o }) {
  const [d, l] = e.useState({
    showChat: !1,
    unreadMessages: 0
  }), a = Y([y.Source.Microphone]);
  return W(), /* @__PURE__ */ e.createElement(Q, { onWidgetChange: l }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference", ...o }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference-stage" }, /* @__PURE__ */ e.createElement(we, { tracks: a }, /* @__PURE__ */ e.createElement(ye, null))), /* @__PURE__ */ e.createElement(
    te,
    {
      controls: { microphone: !0, screenShare: !1, camera: !1, chat: !0 }
    }
  ), d.showChat && /* @__PURE__ */ e.createElement(ee, null)));
}
function nt({
  controls: o,
  saveUserChoices: d = !0,
  onDeviceError: l,
  ...a
}) {
  const E = { leave: !0, microphone: !0, ...o }, p = X(), { microphoneTrack: m, localParticipant: u } = Le(), n = e.useMemo(() => ({
    participant: u,
    source: y.Source.Microphone,
    publication: m
  }), [u, m]);
  p ? E.microphone ?? (E.microphone = p.canPublish) : E.microphone = !1;
  const I = K({ className: "lk-agent-control-bar" }, a), { saveAudioInputEnabled: t, saveAudioInputDeviceId: f } = x({
    preventSave: !d
  }), r = e.useCallback(
    (v, c) => {
      c && t(v);
    },
    [t]
  );
  return /* @__PURE__ */ e.createElement("div", { ...I }, E.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: y.Source.Microphone,
      showIcon: !0,
      onChange: r,
      onDeviceError: (v) => l == null ? void 0 : l({ source: y.Source.Microphone, error: v })
    },
    /* @__PURE__ */ e.createElement(Ie, { trackRef: n, barCount: 7, options: { minHeight: 5 } })
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "audioinput",
      onActiveDeviceChange: (v, c) => f(c ?? "default")
    }
  ))), E.leave && /* @__PURE__ */ e.createElement(J, null, "Disconnect"), /* @__PURE__ */ e.createElement(H, null));
}
export {
  at as AudioConference,
  ee as Chat,
  te as ControlBar,
  O as MediaDeviceMenu,
  et as PreJoin,
  tt as VideoConference,
  nt as VoiceAssistantControlBar,
  Ze as usePreviewDevice,
  ze as usePreviewTracks
};
//# sourceMappingURL=prefabs.mjs.map
