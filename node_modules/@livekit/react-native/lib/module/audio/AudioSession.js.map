{"version":3,"names":["Platform","LiveKitModule","AndroidAudioTypePresets","communication","manageAudioFocus","audioMode","audioFocusMode","audioStreamType","audioAttributesUsageType","audioAttributesContentType","media","getDefaultAppleAudioConfigurationForMode","mode","preferSpeakerOutput","audioCategory","audioCategoryOptions","AudioSession","_defineProperty","config","configureAudio","startAudioSession","stopAudioSession","OS","getAudioOutputs","deviceId","selectAudioOutput","showAudioRoutePicker","setAppleAudioConfiguration"],"sources":["AudioSession.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport LiveKitModule from '../LKNativeModule';\n\n/**\n * Configuration for the underlying AudioSession.\n *\n * ----\n * Android specific options:\n *\n * * preferredOutputList - The preferred order in which to automatically select an audio output.\n *   This is ignored when an output is manually selected with {@link AudioSession.selectAudioOutput}.\n *\n *   By default, the order is set to:\n *   1. `\"bluetooth\"\n *   2. `\"headset\"``\n *   3. `\"speaker\"`\n *   4. `\"earpiece\"`\n *\n * * audioTypeOptions - An {@link AndroidAudioTypeOptions} object which provides the\n *   audio options to use on Android.\n *\n *   See {@link AndroidAudioTypePresets} for pre-configured values.\n *\n * ----\n * iOS\n *\n * * defaultOutput - The default preferred output to use when a wired headset or bluetooth output is unavailable.\n *\n *   By default, this is set to `\"speaker\"`\n */\nexport type AudioConfiguration = {\n  android?: {\n    preferredOutputList?: ('speaker' | 'earpiece' | 'headset' | 'bluetooth')[];\n    audioTypeOptions: AndroidAudioTypeOptions;\n  };\n  ios?: {\n    defaultOutput?: 'speaker' | 'earpiece';\n  };\n};\n\nexport type AndroidAudioTypeOptions = {\n  /**\n   * Whether LiveKit should handle managing the audio focus or not.\n   *\n   * Defaults to true.\n   */\n  manageAudioFocus?: boolean;\n\n  /**\n   * Corresponds to {@link https://developer.android.com/reference/android/media/AudioManager#setMode(int)}\n   *\n   * Defaults to 'inCommunication'.\n   */\n  audioMode?:\n    | 'normal'\n    | 'callScreening'\n    | 'inCall'\n    | 'inCommunication'\n    | 'ringtone';\n\n  /**\n   * Corresponds to the duration hint when requesting audio focus.\n   *\n   * Defaults to 'gain'.\n   *\n   * See also {@link https://developer.android.com/reference/android/media/AudioManager#AUDIOFOCUS_GAIN}\n   */\n  audioFocusMode?:\n    | 'gain'\n    | 'gainTransient'\n    | 'gainTransientExclusive'\n    | 'gainTransientMayDuck';\n\n  /**\n   * Corresponds to Android's AudioAttributes usage type.\n   *\n   * Defaults to 'voiceCommunication'.\n   *\n   * See also {@link https://developer.android.com/reference/android/media/AudioAttributes}\n   */\n  audioAttributesUsageType?:\n    | 'alarm'\n    | 'assistanceAccessibility'\n    | 'assistanceNavigationGuidance'\n    | 'assistanceSonification'\n    | 'assistant'\n    | 'game'\n    | 'media'\n    | 'notification'\n    | 'notificationEvent'\n    | 'notificationRingtone'\n    | 'unknown'\n    | 'voiceCommunication'\n    | 'voiceCommunicationSignalling';\n\n  /**\n   * Corresponds to Android's AndroidAttributes content type.\n   *\n   * Defaults to 'speech'.\n   *\n   * See also {@link https://developer.android.com/reference/android/media/AudioAttributes}\n   */\n  audioAttributesContentType?:\n    | 'movie'\n    | 'music'\n    | 'sonification'\n    | 'speech'\n    | 'unknown';\n\n  /**\n   * Corresponds to the stream type when requesting audio focus. Used on pre-O devices.\n   *\n   * Defaults to 'voiceCall'\n   *\n   * See also {@link https://developer.android.com/reference/android/media/AudioManager#STREAM_VOICE_CALL}\n   */\n  audioStreamType?:\n    | 'accessibility'\n    | 'alarm'\n    | 'dtmf'\n    | 'music'\n    | 'notification'\n    | 'ring'\n    | 'system'\n    | 'voiceCall';\n\n  /**\n   * On certain Android devices, audio routing does not function properly and\n   * bluetooth microphones will not work unless audio mode is set to\n   * `inCommunication` or `inCall`. Audio routing is turned off those cases.\n   *\n   * If this set to true, will attempt to do audio routing regardless of audio mode.\n   *\n   * Defaults to false.\n   */\n  forceHandleAudioRouting?: boolean;\n};\n\nexport const AndroidAudioTypePresets: {\n  /**\n   * A pre-configured AndroidAudioConfiguration for voice communication.\n   */\n  communication: AndroidAudioTypeOptions;\n  /**\n   * A pre-configured AndroidAudioConfiguration for media playback.\n   */\n  media: AndroidAudioTypeOptions;\n} = {\n  communication: {\n    manageAudioFocus: true,\n    audioMode: 'inCommunication',\n    audioFocusMode: 'gain',\n    audioStreamType: 'voiceCall',\n    audioAttributesUsageType: 'voiceCommunication',\n    audioAttributesContentType: 'speech',\n  },\n  media: {\n    manageAudioFocus: true,\n    audioMode: 'normal',\n    audioFocusMode: 'gain',\n    audioStreamType: 'music',\n    audioAttributesUsageType: 'media',\n    audioAttributesContentType: 'unknown',\n  },\n} as const;\n\nexport type AppleAudioMode =\n  | 'default'\n  | 'gameChat'\n  | 'measurement'\n  | 'moviePlayback'\n  | 'spokenAudio'\n  | 'videoChat'\n  | 'videoRecording'\n  | 'voiceChat'\n  | 'voicePrompt';\n\nexport type AppleAudioCategory =\n  | 'soloAmbient'\n  | 'playback'\n  | 'record'\n  | 'playAndRecord'\n  | 'multiRoute';\n\nexport type AppleAudioCategoryOption =\n  | 'mixWithOthers'\n  | 'duckOthers'\n  | 'interruptSpokenAudioAndMixWithOthers'\n  | 'allowBluetooth'\n  | 'allowBluetoothA2DP'\n  | 'allowAirPlay'\n  | 'defaultToSpeaker';\n\nexport type AppleAudioConfiguration = {\n  audioCategory?: AppleAudioCategory;\n  audioCategoryOptions?: AppleAudioCategoryOption[];\n  audioMode?: AppleAudioMode;\n};\n\nexport type AudioTrackState =\n  | 'none'\n  | 'remoteOnly'\n  | 'localOnly'\n  | 'localAndRemote';\n\nexport function getDefaultAppleAudioConfigurationForMode(\n  mode: AudioTrackState,\n  preferSpeakerOutput: boolean = true\n): AppleAudioConfiguration {\n  if (mode === 'remoteOnly') {\n    return {\n      audioCategory: 'playback',\n      audioCategoryOptions: ['mixWithOthers'],\n      audioMode: 'spokenAudio',\n    };\n  } else if (mode === 'localAndRemote' || mode === 'localOnly') {\n    return {\n      audioCategory: 'playAndRecord',\n      audioCategoryOptions: ['allowBluetooth', 'mixWithOthers'],\n      audioMode: preferSpeakerOutput ? 'videoChat' : 'voiceChat',\n    };\n  }\n\n  return {\n    audioCategory: 'soloAmbient',\n    audioCategoryOptions: [],\n    audioMode: 'default',\n  };\n}\n\nexport default class AudioSession {\n  /**\n   * Applies the provided audio configuration to the underlying AudioSession.\n   *\n   * Must be called prior to connecting to a Room for the configuration to apply correctly.\n   *\n   * See also useIOSAudioManagement for automatic configuration of iOS audio options.\n   */\n  static configureAudio = async (config: AudioConfiguration) => {\n    await LiveKitModule.configureAudio(config);\n  };\n\n  /**\n   * Starts an AudioSession.\n   */\n  static startAudioSession = async () => {\n    await LiveKitModule.startAudioSession();\n  };\n\n  /**\n   * Stops the existing AudioSession.\n   */\n  static stopAudioSession = async () => {\n    await LiveKitModule.stopAudioSession();\n  };\n\n  /**\n   * Gets the available audio outputs for use with {@link selectAudioOutput}.\n   *\n   * {@link startAudioSession} must be called prior to using this method.\n   *\n   * For Android, will return if available:\n   * * \"speaker\"\n   * * \"earpiece\"\n   * * \"headset\"\n   * * \"bluetooth\"\n   *\n   * ----\n   *\n   * For iOS, due to OS limitations, the only available types are:\n   * * \"default\" - Use default iOS audio routing\n   * * \"force_speaker\" - Force audio output through speaker\n   *\n   * See also {@link showAudioRoutePicker} to display a route picker that\n   * can choose between other audio devices (i.e. headset/bluetooth/airplay),\n   * or use a library like `react-native-avroutepicker` for a native platform\n   * control.\n   *\n   * @returns the available audio output types\n   */\n  static getAudioOutputs = async (): Promise<string[]> => {\n    if (Platform.OS === 'ios') {\n      return ['default', 'force_speaker'];\n    } else if (Platform.OS === 'android') {\n      return (await LiveKitModule.getAudioOutputs()) as string[];\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Select the provided audio output if available.\n   *\n   * {@link startAudioSession} must be called prior to using this method.\n   *\n   * @param deviceId A deviceId retrieved from {@link getAudioOutputs}\n   */\n  static selectAudioOutput = async (deviceId: string) => {\n    await LiveKitModule.selectAudioOutput(deviceId);\n  };\n\n  /**\n   * iOS only, requires iOS 11+.\n   *\n   * Displays an AVRoutePickerView for the user to choose their audio output.\n   */\n  static showAudioRoutePicker = async () => {\n    if (Platform.OS === 'ios') {\n      await LiveKitModule.showAudioRoutePicker();\n    }\n  };\n\n  /**\n   * Directly change the AVAudioSession category/mode.\n   *\n   * @param config The configuration to use. Null values will be omitted and the\n   * existing values will be unchanged.\n   */\n  static setAppleAudioConfiguration = async (\n    config: AppleAudioConfiguration\n  ) => {\n    if (Platform.OS === 'ios') {\n      await LiveKitModule.setAppleAudioConfiguration(config);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}