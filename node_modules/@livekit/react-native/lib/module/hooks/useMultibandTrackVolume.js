import { Track } from 'livekit-client';
import { useEffect, useMemo, useState } from 'react';
import { addListener, removeListener } from '../events/EventEmitter';
import LiveKitModule from '../LKNativeModule';

/**
 * Interface for configuring options for the useMultibandTrackVolume hook.
 * @alpha
 */

const multibandDefaults = {
  bands: 5,
  minFrequency: 1000,
  maxFrequency: 8000,
  updateInterval: 40
};

/**
 * A hook for tracking the volume of an audio track across multiple frequency bands.
 *
 * @param trackOrTrackReference
 * @returns A number array containing the volume for each frequency band.
 */
export function useMultibandTrackVolume(trackOrTrackReference, options) {
  var _trackOrTrackReferenc;
  const track = trackOrTrackReference instanceof Track ? trackOrTrackReference : trackOrTrackReference === null || trackOrTrackReference === void 0 || (_trackOrTrackReferenc = trackOrTrackReference.publication) === null || _trackOrTrackReferenc === void 0 ? void 0 : _trackOrTrackReferenc.track;
  const opts = useMemo(() => {
    return {
      ...multibandDefaults,
      ...options
    };

    // disabled due to use of JSON.stringify, dependencies are reference equality
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify(options)]);
  const mediaStreamTrack = track === null || track === void 0 ? void 0 : track.mediaStreamTrack;
  const hasMediaStreamTrack = mediaStreamTrack != null;
  const peerConnectionId = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack._peerConnectionId) ?? -1;
  const mediaStreamTrackId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.id;
  let [magnitudes, setMagnitudes] = useState([]);
  useEffect(() => {
    let listener = Object();
    let reactTag = null;
    if (hasMediaStreamTrack) {
      reactTag = LiveKitModule.createMultibandVolumeProcessor(opts, peerConnectionId, mediaStreamTrackId);
      addListener(listener, 'LK_MULTIBAND_PROCESSED', event => {
        if (event.magnitudes && reactTag && event.id === reactTag) {
          setMagnitudes(event.magnitudes);
        }
      });
    }
    return () => {
      if (hasMediaStreamTrack) {
        removeListener(listener);
        if (reactTag) {
          LiveKitModule.deleteMultibandVolumeProcessor(reactTag, peerConnectionId, mediaStreamTrackId);
        }
      }
    };
  }, [hasMediaStreamTrack, peerConnectionId, mediaStreamTrackId, opts]);
  return magnitudes;
}
//# sourceMappingURL=useMultibandTrackVolume.js.map