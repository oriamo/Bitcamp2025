import { Track } from 'livekit-client';
import { useEffect, useState } from 'react';
import { addListener, removeListener } from '../events/EventEmitter';
import LiveKitModule from '../LKNativeModule';
/**
 * A hook for tracking the volume of an audio track.
 *
 * @param trackOrTrackReference
 * @returns A number between 0-1 representing the volume.
 */
export function useTrackVolume(trackOrTrackReference) {
  var _trackOrTrackReferenc;
  const track = trackOrTrackReference instanceof Track ? trackOrTrackReference : trackOrTrackReference === null || trackOrTrackReference === void 0 || (_trackOrTrackReferenc = trackOrTrackReference.publication) === null || _trackOrTrackReferenc === void 0 ? void 0 : _trackOrTrackReferenc.track;
  const mediaStreamTrack = track === null || track === void 0 ? void 0 : track.mediaStreamTrack;
  const hasMediaStreamTrack = mediaStreamTrack != null;
  const peerConnectionId = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack._peerConnectionId) ?? -1;
  const mediaStreamTrackId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.id;
  let [volume, setVolume] = useState(0.0);
  useEffect(() => {
    let listener = Object();
    let reactTag = null;
    if (hasMediaStreamTrack) {
      reactTag = LiveKitModule.createVolumeProcessor(peerConnectionId, mediaStreamTrackId);
      addListener(listener, 'LK_VOLUME_PROCESSED', event => {
        if (event.volume && reactTag && event.id === reactTag) {
          setVolume(event.volume);
        }
      });
    }
    return () => {
      if (hasMediaStreamTrack) {
        removeListener(listener);
        if (reactTag) {
          LiveKitModule.deleteVolumeProcessor(reactTag, peerConnectionId, mediaStreamTrackId);
        }
      }
    };
  }, [hasMediaStreamTrack, peerConnectionId, mediaStreamTrackId]);
  return volume;
}
//# sourceMappingURL=useTrackVolume.js.map