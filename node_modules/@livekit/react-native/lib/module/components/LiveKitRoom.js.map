{"version":3,"names":["LKFeatureContext","RoomContext","useLiveKitRoom","React","LiveKitRoom","props","room","createElement","Fragment","Provider","value","featureFlags","children"],"sources":["LiveKitRoom.tsx"],"sourcesContent":["import {\n  type FeatureFlags,\n  LKFeatureContext,\n  RoomContext,\n  useLiveKitRoom,\n} from '@livekit/components-react';\nimport type {\n  AudioCaptureOptions,\n  RoomConnectOptions,\n  RoomOptions,\n  ScreenShareCaptureOptions,\n  VideoCaptureOptions,\n} from 'livekit-client';\nimport type { MediaDeviceFailure, Room } from 'livekit-client';\nimport * as React from 'react';\n\n/** @public */\nexport interface LiveKitRoomProps {\n  /**\n   * URL to the LiveKit server.\n   * For example: `wss://<domain>.livekit.cloud`\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string url can the connection be established.\n   */\n  serverUrl: string | undefined;\n  /**\n   * A user specific access token for a client to authenticate to the room.\n   * This token is necessary to establish a connection to the room.\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string token can the connection be established.\n   *\n   * @see https://docs.livekit.io/cloud/project-management/keys-and-tokens/#generating-access-tokens\n   */\n  token: string | undefined;\n  /**\n   * Publish audio immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/AudioCaptureOptions.html\n   */\n  audio?: AudioCaptureOptions | boolean;\n  /**\n   * Publish video immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/VideoCaptureOptions.html\n   */\n  video?: VideoCaptureOptions | boolean;\n  /**\n   * Publish screen share immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/ScreenShareCaptureOptions.html\n   */\n  screen?: ScreenShareCaptureOptions | boolean;\n  /**\n   * If set to true a connection to LiveKit room is initiated.\n   * @defaultValue `false`\n   */\n  connect?: boolean;\n  /**\n   * Options for when creating a new room.\n   * When you pass your own room instance to this component, these options have no effect.\n   * Instead, set the options directly in the room instance.\n   *\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomOptions.html\n   */\n  options?: RoomOptions;\n  /**\n   * Define options how to connect to the LiveKit server.\n   *\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomConnectOptions.html\n   */\n  connectOptions?: RoomConnectOptions;\n  onConnected?: () => void;\n  onDisconnected?: () => void;\n  onError?: (error: Error) => void;\n  onMediaDeviceFailure?: (failure?: MediaDeviceFailure) => void;\n  onEncryptionError?: (error: Error) => void;\n  /**\n   * Optional room instance.\n   * By passing your own room instance you overwrite the `options` parameter,\n   * make sure to set the options directly on the room instance itself.\n   */\n  room?: Room;\n\n  simulateParticipants?: number | undefined;\n\n  /** @experimental */\n  featureFlags?: FeatureFlags | undefined;\n}\n\n/**\n * The `LiveKitRoom` component provides the room context to all its child components.\n * It is generally the starting point of your LiveKit app and the root of the LiveKit component tree.\n * It provides the room state as a React context to all child components, so you don't have to pass it yourself.\n *\n * @example\n * ```tsx\n * <LiveKitRoom\n *  token='<livekit-token>'\n *  serverUrl='<url-to-livekit-server>'\n *  connect={true}\n * >\n *     ...\n * </LiveKitRoom>\n * ```\n * @public\n */\nexport function LiveKitRoom(props: React.PropsWithChildren<LiveKitRoomProps>) {\n  const { room } = useLiveKitRoom(props);\n  return (\n    <>\n      {room && (\n        <RoomContext.Provider value={room}>\n          <LKFeatureContext.Provider value={props.featureFlags}>\n            {props.children}\n          </LKFeatureContext.Provider>\n        </RoomContext.Provider>\n      )}\n    </>\n  );\n}\n"],"mappings":"AAAA,SAEEA,gBAAgB,EAChBC,WAAW,EACXC,cAAc,QACT,2BAA2B;AASlC,OAAO,KAAKC,KAAK,MAAM,OAAO;;AAE9B;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,KAAgD,EAAE;EAC5E,MAAM;IAAEC;EAAK,CAAC,GAAGJ,cAAc,CAACG,KAAK,CAAC;EACtC,oBACEF,KAAA,CAAAI,aAAA,CAAAJ,KAAA,CAAAK,QAAA,QACGF,IAAI,iBACHH,KAAA,CAAAI,aAAA,CAACN,WAAW,CAACQ,QAAQ;IAACC,KAAK,EAAEJ;EAAK,gBAChCH,KAAA,CAAAI,aAAA,CAACP,gBAAgB,CAACS,QAAQ;IAACC,KAAK,EAAEL,KAAK,CAACM;EAAa,GAClDN,KAAK,CAACO,QACkB,CACP,CAExB,CAAC;AAEP","ignoreList":[]}