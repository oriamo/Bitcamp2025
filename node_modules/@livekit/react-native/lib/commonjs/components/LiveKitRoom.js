"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiveKitRoom = LiveKitRoom;
var _componentsReact = require("@livekit/components-react");
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @public */

/**
 * The `LiveKitRoom` component provides the room context to all its child components.
 * It is generally the starting point of your LiveKit app and the root of the LiveKit component tree.
 * It provides the room state as a React context to all child components, so you don't have to pass it yourself.
 *
 * @example
 * ```tsx
 * <LiveKitRoom
 *  token='<livekit-token>'
 *  serverUrl='<url-to-livekit-server>'
 *  connect={true}
 * >
 *     ...
 * </LiveKitRoom>
 * ```
 * @public
 */
function LiveKitRoom(props) {
  const {
    room
  } = (0, _componentsReact.useLiveKitRoom)(props);
  return /*#__PURE__*/React.createElement(React.Fragment, null, room && /*#__PURE__*/React.createElement(_componentsReact.RoomContext.Provider, {
    value: room
  }, /*#__PURE__*/React.createElement(_componentsReact.LKFeatureContext.Provider, {
    value: props.featureFlags
  }, props.children)));
}
//# sourceMappingURL=LiveKitRoom.js.map