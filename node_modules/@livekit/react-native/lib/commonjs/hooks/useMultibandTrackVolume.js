"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMultibandTrackVolume = useMultibandTrackVolume;
var _livekitClient = require("livekit-client");
var _react = require("react");
var _EventEmitter = require("../events/EventEmitter");
var _LKNativeModule = _interopRequireDefault(require("../LKNativeModule"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Interface for configuring options for the useMultibandTrackVolume hook.
 * @alpha
 */

const multibandDefaults = {
  bands: 5,
  minFrequency: 1000,
  maxFrequency: 8000,
  updateInterval: 40
};

/**
 * A hook for tracking the volume of an audio track across multiple frequency bands.
 *
 * @param trackOrTrackReference
 * @returns A number array containing the volume for each frequency band.
 */
function useMultibandTrackVolume(trackOrTrackReference, options) {
  var _trackOrTrackReferenc;
  const track = trackOrTrackReference instanceof _livekitClient.Track ? trackOrTrackReference : trackOrTrackReference === null || trackOrTrackReference === void 0 || (_trackOrTrackReferenc = trackOrTrackReference.publication) === null || _trackOrTrackReferenc === void 0 ? void 0 : _trackOrTrackReferenc.track;
  const opts = (0, _react.useMemo)(() => {
    return {
      ...multibandDefaults,
      ...options
    };

    // disabled due to use of JSON.stringify, dependencies are reference equality
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify(options)]);
  const mediaStreamTrack = track === null || track === void 0 ? void 0 : track.mediaStreamTrack;
  const hasMediaStreamTrack = mediaStreamTrack != null;
  const peerConnectionId = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack._peerConnectionId) ?? -1;
  const mediaStreamTrackId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.id;
  let [magnitudes, setMagnitudes] = (0, _react.useState)([]);
  (0, _react.useEffect)(() => {
    let listener = Object();
    let reactTag = null;
    if (hasMediaStreamTrack) {
      reactTag = _LKNativeModule.default.createMultibandVolumeProcessor(opts, peerConnectionId, mediaStreamTrackId);
      (0, _EventEmitter.addListener)(listener, 'LK_MULTIBAND_PROCESSED', event => {
        if (event.magnitudes && reactTag && event.id === reactTag) {
          setMagnitudes(event.magnitudes);
        }
      });
    }
    return () => {
      if (hasMediaStreamTrack) {
        (0, _EventEmitter.removeListener)(listener);
        if (reactTag) {
          _LKNativeModule.default.deleteMultibandVolumeProcessor(reactTag, peerConnectionId, mediaStreamTrackId);
        }
      }
    };
  }, [hasMediaStreamTrack, peerConnectionId, mediaStreamTrackId, opts]);
  return magnitudes;
}
//# sourceMappingURL=useMultibandTrackVolume.js.map