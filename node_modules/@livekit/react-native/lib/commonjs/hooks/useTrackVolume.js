"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTrackVolume = useTrackVolume;
var _livekitClient = require("livekit-client");
var _react = require("react");
var _EventEmitter = require("../events/EventEmitter");
var _LKNativeModule = _interopRequireDefault(require("../LKNativeModule"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * A hook for tracking the volume of an audio track.
 *
 * @param trackOrTrackReference
 * @returns A number between 0-1 representing the volume.
 */
function useTrackVolume(trackOrTrackReference) {
  var _trackOrTrackReferenc;
  const track = trackOrTrackReference instanceof _livekitClient.Track ? trackOrTrackReference : trackOrTrackReference === null || trackOrTrackReference === void 0 || (_trackOrTrackReferenc = trackOrTrackReference.publication) === null || _trackOrTrackReferenc === void 0 ? void 0 : _trackOrTrackReferenc.track;
  const mediaStreamTrack = track === null || track === void 0 ? void 0 : track.mediaStreamTrack;
  const hasMediaStreamTrack = mediaStreamTrack != null;
  const peerConnectionId = (mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack._peerConnectionId) ?? -1;
  const mediaStreamTrackId = mediaStreamTrack === null || mediaStreamTrack === void 0 ? void 0 : mediaStreamTrack.id;
  let [volume, setVolume] = (0, _react.useState)(0.0);
  (0, _react.useEffect)(() => {
    let listener = Object();
    let reactTag = null;
    if (hasMediaStreamTrack) {
      reactTag = _LKNativeModule.default.createVolumeProcessor(peerConnectionId, mediaStreamTrackId);
      (0, _EventEmitter.addListener)(listener, 'LK_VOLUME_PROCESSED', event => {
        if (event.volume && reactTag && event.id === reactTag) {
          setVolume(event.volume);
        }
      });
    }
    return () => {
      if (hasMediaStreamTrack) {
        (0, _EventEmitter.removeListener)(listener);
        if (reactTag) {
          _LKNativeModule.default.deleteVolumeProcessor(reactTag, peerConnectionId, mediaStreamTrackId);
        }
      }
    };
  }, [hasMediaStreamTrack, peerConnectionId, mediaStreamTrackId]);
  return volume;
}
//# sourceMappingURL=useTrackVolume.js.map