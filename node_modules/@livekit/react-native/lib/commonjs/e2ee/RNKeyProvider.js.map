{"version":3,"names":["_livekitClient","require","_reactNativeWebrtc","_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","defaultRatchetSalt","defaultMagicBytes","defaultRatchetWindowSize","defaultFailureTolerance","defaultKeyRingSize","defaultDiscardFrameWhenCryptorNotReady","RNKeyProvider","BaseKeyProvider","constructor","options","opts","sharedKey","ratchetSalt","ratchetWindowSize","failureTolerance","keyRingSize","keyringSize","discardFrameWhenCryptorNotReady","magicBytes","uncryptedMagicBytes","TextEncoder","encode","Map","nativeKeyProvider","RTCFrameCryptorFactory","createDefaultKeyProvider","getLatestKeyIndex","participantId","latestSetIndex","get","setSharedKey","key","keyIndex","ratchetSharedKey","setKey","getOptions","set","ratchetKey","participantIdentity","setSifTrailer","trailer","rtcKeyProvider","dispose","exports","default"],"sources":["RNKeyProvider.ts"],"sourcesContent":["import { BaseKeyProvider, type KeyProviderOptions } from 'livekit-client';\nimport {\n  RTCFrameCryptorFactory,\n  RTCKeyProvider,\n  type RTCKeyProviderOptions,\n} from '@livekit/react-native-webrtc';\n\nconst defaultRatchetSalt = 'LKFrameEncryptionKey';\nconst defaultMagicBytes = 'LK-ROCKS';\nconst defaultRatchetWindowSize = 16;\nconst defaultFailureTolerance = -1;\nconst defaultKeyRingSize = 16;\nconst defaultDiscardFrameWhenCryptorNotReady = false;\n\n/**\n * Options for construction an RNKeyProvider\n */\nexport type RNKeyProviderOptions = KeyProviderOptions & {\n  uncryptedMagicBytes?: string | Uint8Array;\n};\n\n/**\n * @experimental\n */\nexport default class RNKeyProvider extends BaseKeyProvider {\n  private latestSetIndex: Map<string, number> = new Map();\n  private nativeKeyProvider: RTCKeyProvider;\n\n  constructor(options: Partial<RNKeyProviderOptions>) {\n    const opts: RTCKeyProviderOptions & KeyProviderOptions = {\n      sharedKey: options.sharedKey ?? true,\n      ratchetSalt: options.ratchetSalt ?? defaultRatchetSalt,\n      ratchetWindowSize: options.ratchetWindowSize ?? defaultRatchetWindowSize,\n      failureTolerance: options.failureTolerance ?? defaultFailureTolerance,\n      keyRingSize: options.keyringSize ?? defaultKeyRingSize,\n      keyringSize: options.keyringSize ?? defaultKeyRingSize,\n      discardFrameWhenCryptorNotReady: defaultDiscardFrameWhenCryptorNotReady,\n    };\n\n    let magicBytes = options.uncryptedMagicBytes ?? defaultMagicBytes;\n    if (typeof magicBytes === 'string') {\n      magicBytes = new TextEncoder().encode(magicBytes);\n    }\n    opts.uncryptedMagicBytes = magicBytes;\n\n    super(opts);\n\n    this.nativeKeyProvider =\n      RTCFrameCryptorFactory.createDefaultKeyProvider(opts);\n  }\n\n  getLatestKeyIndex(participantId: string) {\n    return this.latestSetIndex.get(participantId) ?? 0;\n  }\n\n  /**\n   * Accepts a passphrase that's used to create the crypto keys.\n   * @param key\n   */\n  async setSharedKey(key: string | Uint8Array, keyIndex?: number) {\n    return this.nativeKeyProvider.setSharedKey(key, keyIndex);\n  }\n\n  async ratchetSharedKey(keyIndex?: number) {\n    this.nativeKeyProvider.ratchetSharedKey(keyIndex);\n  }\n\n  /**\n   * Accepts a passphrase that's used to create the crypto keys for a participant's stream.\n   * @param key\n   */\n  async setKey(\n    participantId: string,\n    key: string | Uint8Array,\n    keyIndex?: number\n  ) {\n    if (this.getOptions().sharedKey) {\n      return this.setSharedKey(key, keyIndex);\n    }\n\n    this.latestSetIndex.set(participantId, keyIndex ?? 0);\n    return this.nativeKeyProvider.setKey(participantId, key, keyIndex);\n  }\n\n  override async ratchetKey(participantIdentity?: string, keyIndex?: number) {\n    if (!this.getOptions().sharedKey && participantIdentity) {\n      this.nativeKeyProvider.ratchetKey(participantIdentity, keyIndex);\n    } else {\n      this.ratchetSharedKey(keyIndex);\n    }\n  }\n\n  async setSifTrailer(trailer: Uint8Array) {\n    return this.nativeKeyProvider.setSifTrailer(trailer);\n  }\n\n  /**\n   * @internal\n   */\n  get rtcKeyProvider() {\n    return this.nativeKeyProvider;\n  }\n\n  dispose() {\n    this.nativeKeyProvider.dispose();\n  }\n}\n\n// /**\n//  * Define the `onxxx` event handlers.\n//  */\n// const proto = RNExternalE2EEKeyProvider.prototype;\n\n// defineEventAttribute(proto, KeyProviderEvent.SetKey);\n// defineEventAttribute(proto, KeyProviderEvent.RatchetRequest);\n// defineEventAttribute(proto, KeyProviderEvent.KeyRatcheted);\n"],"mappings":"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","ignoreList":[]}