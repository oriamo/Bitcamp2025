export const __esModule: boolean;
export default RNKeyProvider;
declare const RNKeyProvider_base: any;
/**
 * Options for construction an RNKeyProvider
 */
/**
 * @experimental
 */
declare class RNKeyProvider extends RNKeyProvider_base {
    [x: string]: any;
    constructor(options: any);
    nativeKeyProvider: any;
    getLatestKeyIndex(participantId: any): any;
    /**
     * Accepts a passphrase that's used to create the crypto keys.
     * @param key
     */
    setSharedKey(key: any, keyIndex: any): Promise<any>;
    ratchetSharedKey(keyIndex: any): Promise<void>;
    /**
     * Accepts a passphrase that's used to create the crypto keys for a participant's stream.
     * @param key
     */
    setKey(participantId: any, key: any, keyIndex: any): Promise<any>;
    ratchetKey(participantIdentity: any, keyIndex: any): Promise<void>;
    setSifTrailer(trailer: any): Promise<any>;
    /**
     * @internal
     */
    get rtcKeyProvider(): any;
    dispose(): void;
}
